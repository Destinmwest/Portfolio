
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JazzParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JazzParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public JazzParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JazzParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JazzParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\003\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\006\004\000\002\006" +
    "\003\000\002\007\005\000\002\007\003\000\002\010\005" +
    "\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\020\013\004\014\010\016\011\017\006\020" +
    "\007\022\005\023\013\001\002\000\012\005\017\011\027" +
    "\015\021\016\024\001\002\000\002\001\002\000\002\001" +
    "\002\000\002\001\002\000\012\005\017\011\027\015\021" +
    "\016\024\001\002\000\004\021\016\001\002\000\004\002" +
    "\015\001\002\000\002\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\000\001\002\000\012\005\017\011\027\015" +
    "\021\016\024\001\002\000\010\011\027\015\021\016\024" +
    "\001\002\000\016\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\012\ufff2\001\002\000\020\002\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\001\002\000\016\002" +
    "\ufff7\004\ufff7\005\ufff7\006\036\007\035\012\ufff7\001\002" +
    "\000\016\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\012" +
    "\ufff4\001\002\000\020\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\001\002\000\010\002\001\004" +
    "\032\005\033\001\002\000\020\002\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\042\012\ufff0\001\002\000\012\005" +
    "\017\011\027\015\021\016\024\001\002\000\010\004\032" +
    "\005\033\012\031\001\002\000\020\002\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\012\uffef\001\002\000\012" +
    "\005\017\011\027\015\021\016\024\001\002\000\012\005" +
    "\017\011\027\015\021\016\024\001\002\000\016\002\ufff8" +
    "\004\ufff8\005\ufff8\006\036\007\035\012\ufff8\001\002\000" +
    "\012\005\017\011\027\015\021\016\024\001\002\000\012" +
    "\005\017\011\027\015\021\016\024\001\002\000\016\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\001\002" +
    "\000\016\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\012" +
    "\ufff5\001\002\000\016\002\ufff9\004\ufff9\005\ufff9\006\036" +
    "\007\035\012\ufff9\001\002\000\010\011\027\015\021\016" +
    "\024\001\002\000\016\002\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\012\ufff1\001\002\000\016\002\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\012\ufff3\001\002\000\010\002\ufffa" +
    "\004\032\005\033\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffe\001\002\000\010" +
    "\002\ufffb\004\032\005\033\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\003\011\001\001\000\014\004\050\005" +
    "\021\006\022\007\017\010\025\001\001\000\004\002\047" +
    "\001\001\000\004\002\046\001\001\000\004\002\045\001" +
    "\001\000\014\004\044\005\021\006\022\007\017\010\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\024\005\021\006\022\007\017\010\025\001\001\000" +
    "\006\007\043\010\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\027" +
    "\005\021\006\022\007\017\010\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\040\006\022\007\017" +
    "\010\025\001\001\000\012\005\033\006\022\007\017\010" +
    "\025\001\001\000\002\001\001\000\010\006\037\007\017" +
    "\010\025\001\001\000\010\006\036\007\017\010\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\042\010\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JazzParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JazzParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JazzParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return scanner.yylex();

    }


    JazzScanner scanner;
    public JazzParser(JazzScanner scanner) {
        this.scanner = scanner;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JazzParser$actions {
  private final JazzParser parser;

  /** Constructor */
  CUP$JazzParser$actions(JazzParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JazzParser$do_action_part00000000(
    int                        CUP$JazzParser$act_num,
    java_cup.runtime.lr_parser CUP$JazzParser$parser,
    java.util.Stack            CUP$JazzParser$stack,
    int                        CUP$JazzParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JazzParser$result;

      /* select the action based on the action number */
      switch (CUP$JazzParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // statement ::= IDENTIFIER ASSIGNED expr 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)).value;
		RESULT = start_val;
              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JazzParser$parser.done_parsing();
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= STRING_LITERAL string 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= STATEMENT string 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= INPUT string 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= PRINT string 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= COMMA expr 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= EQUALS expr 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr PLUS term 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr MINUS term 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= term 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= term TIMES negation 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= term DIVIDE negation 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= negation 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // negation ::= MINUS power 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("negation",4, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // negation ::= power 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("negation",4, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // power ::= paren POWER power 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("power",5, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // power ::= paren 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("power",5, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paren ::= LPAREN expr RPAREN 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-1)).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("paren",6, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.elementAt(CUP$JazzParser$top-2)), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paren ::= NUMBER 
            {
              Node RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("paren",6, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paren ::= IDENTIFIER 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JazzParser$stack.peek()).value;

              CUP$JazzParser$result = parser.getSymbolFactory().newSymbol("paren",6, ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JazzParser$stack.peek()), RESULT);
            }
          return CUP$JazzParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JazzParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JazzParser$do_action(
    int                        CUP$JazzParser$act_num,
    java_cup.runtime.lr_parser CUP$JazzParser$parser,
    java.util.Stack            CUP$JazzParser$stack,
    int                        CUP$JazzParser$top)
    throws java.lang.Exception
    {
              return CUP$JazzParser$do_action_part00000000(
                               CUP$JazzParser$act_num,
                               CUP$JazzParser$parser,
                               CUP$JazzParser$stack,
                               CUP$JazzParser$top);
    }
}

}
